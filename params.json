{"name":"Rigol DS1052E Oscilloscope Python Interface","tagline":"Python program used to graph data from a Rigol DS1052E oscilloscope on a linux computer.","body":"<pre>\r\nThis is a simple python program (using matplotlib and numpy)\r\nfor connecting to a Rigol DS1052E digital oscilloscope\r\nand retrieving the data for display on a linux computer.\r\nThanks to matplotlib, you can scale the data vertically\r\nand horizontally and save images in various formats\r\nsuch as jpeg and png.\r\n</pre>\r\n\r\n![Two Channel Display](https://raw.githubusercontent.com/VinnieM-3/Rigol-DS1052E-Interface/master/common/images/two_channel.png)\r\n\r\n![Printer Friendly Display](https://raw.githubusercontent.com/VinnieM-3/Rigol-DS1052E-Interface/master/common/images/printerfriendly.png)\r\n\r\n</pre>\r\nRequirements:\r\nPython 2.7.x or 3.5.x (Anaconda was used to create the test environments)\r\nmatplotlib 1.5 or later\r\nnumpy\r\nusbtmc drivers\r\n\r\nInstallation Instructions\r\n1. Install python, matplotlib, and numpy.\r\nYou might want to consider something like Anaconda to simplify this process.\r\n\r\n2. Install usbtmc but many newer distros already have it pre-installed.\r\n\r\n3. You may need to create a /etc/udev/rules.d/usbtmc.rules file containing the following:\r\n        # USBTMC instruments\r\n        # Rigol DS1052E\r\n        SUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idVendor}==\"1ab1\", ATTRS{idProduct}==\"0588\", GROUP=\"usbtmc\", MODE=\"0660\"\r\n   After creating the file above, add your account to the usbtmc group, and logout and back in.\r\n\r\n4. You may need to start usbtmc the first time using \"sudo modprobe usbtmc\"\r\n\r\n5. Download rigolusb.py, scope.py, and scope_gui.py to a folder.\r\n\r\n6. Connect your DS1052E to your computer with a USB cord and run scope_gui.py and pass in the device path.\r\n   For example:\r\n        python scope_gui.py -d /dev/usbtmc1\r\n        python scope_gui.py -d /dev/usbtmc1 -p             Note: -p displays a printfriendly black and white graph\r\n        python scope_gui.py -d /dev/usbtmc1 -s dots        Note: plots dots instead of lines\r\n        python scope_gui.py -d /dev/usbtmc1 -o mydata.dat  Note: Saves scope data to a file\r\n        python scope_gui.py -d /dev/usbtmc1 -i mydata.dat  Note: Opens scope data from a file\r\n        python scope_gui.py -d /dev/usbtmc1 -m NOR         Note: Only retrieves 600 data points instead of entire scope memory.\r\n</pre>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}